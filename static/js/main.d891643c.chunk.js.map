{"version":3,"sources":["images/keivon_cp.jpg","Album.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","icon","marginRight","spacing","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","cards","Album","classes","Container","className","maxWidth","Grid","container","map","item","key","xs","sm","md","Card","style","opacity","CardMedia","image","title","CardContent","Typography","gutterBottom","variant","component","CardActions","Button","size","color","App","class","href","id","src","ProfileImg","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,uC,+PCarCC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,YAAaF,EAAMG,QAAQ,IAG7BC,SAAU,CACRC,WAAYL,EAAMG,QAAQ,GAC1BG,cAAeN,EAAMG,QAAQ,IAE/BI,KAAM,CACJC,OAAQ,OACRC,QAAS,OACTC,cAAe,UAGjBC,UAAW,CACTN,WAAY,UAEdO,YAAa,CACXC,SAAU,MAORC,EAAQ,CAAC,EAAG,EAAG,GAGN,SAASC,IACtB,IAAMC,EAAUlB,IAEhB,OACI,oCACE,kBAACmB,EAAA,EAAD,CAAWC,UAAWF,EAAQZ,SAAUe,SAAS,MAC/C,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAClB,QAAS,GACtBW,EAAMQ,IAAI,SAAAf,GAAI,OACb,kBAACa,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAKjB,EAAMkB,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACvC,kBAACC,EAAA,EAAD,CAAMV,UAAWF,EAAQT,KAAMsB,MAAS,CAACC,QAAS,KAChD,kBAACC,EAAA,EAAD,CACEb,UAAWF,EAAQL,UACnBqB,MAAM,qCACNC,MAAM,gBAER,kBAACC,EAAA,EAAD,CAAahB,UAAWF,EAAQJ,aAC9B,kBAACuB,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAhD,WACW/B,GAEX,kBAAC4B,EAAA,EAAD,iFAIF,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAM,WAA3B,gB,iCClBLC,MAvCf,WACE,OACE,yBAAKzB,UAAU,kBACb,6BACE,wBAAIA,UAAU,UACZ,4BAAI,uBAAG0B,MAAM,SAASC,KAAK,SAAvB,SACJ,4BAAI,uBAAGA,KAAK,aAAR,aACJ,4BAAI,uBAAGA,KAAK,YAAR,cAGR,yBAAK3B,UAAU,cAAc4B,GAAG,QAC9B,yBAAK5B,UAAU,UACb,4BAAQ0B,MAAM,YACZ,yBAAKA,MAAM,iBAAgB,yBAAKG,IAAKC,IAAYC,IAAI,cACrD,oCACE,8CACA,oDACA,2eASR,yBAAK/B,UAAU,cAAc4B,GAAG,YAC9B,kBAAC/B,EAAD,OAGF,yBAAKG,UAAU,cAAc4B,GAAG,cC3BlBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d891643c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/keivon_cp.c165fa4b.jpg\";","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\n\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  \n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    \n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n    \n  },\n\n  \n}));\n\nconst cards = [1, 2, 3];\n\n\nexport default function Album() {\n  const classes = useStyles();\n\n  return (\n      <>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          <Grid container spacing={4}>\n            {cards.map(card => (\n              <Grid item key={card} xs={12} sm={6} md={4}>\n                <Card className={classes.card} style = {{opacity: 0.9}}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    image=\"https://source.unsplash.com/random\"\n                    title=\"Image title\"\n                  />\n                  <CardContent className={classes.cardContent} >\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Heading {card}\n                    </Typography>\n                    <Typography>\n                      This is a media card. You can use this section to describe the content.\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                      Demo\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      </>\n  );\n}","import React from 'react';\nimport Album from '../src/Album'\nimport ProfileImg from '../src/images/keivon_cp.jpg';\nimport './Style/App.css';\nimport './Style/Profile.css';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"flex-container\">\n      <div>\n        <ul className='navbar'>\n          <li><a class=\"active\" href=\"#home\">Home</a></li>\n          <li><a href=\"#Projects\">Projects</a></li>\n          <li><a href=\"#contact\">Contact</a></li>\n        </ul>\n      </div>\n      <div className=\"flex-item-0\" id='home' >\n        <div className=\"Propic\" >\n          <figure class=\"snip1515\">\n            <div class=\"profile-image\"><img src={ProfileImg} alt=\"sample83\" /></div>\n            <figcaption>\n              <h3>Keivon Proctor</h3>\n              <h4>Full Stack Developer</h4>\n              <p>Iâ€™m excited to be at the deployment phase of my career as a web developer. I am ambitious, adventurous, assiduous,\n                and animated. My area of interest is mostly dealing with back-end because I love to see how things work. But after doing\n                some work in React I would like to learn more on the front-end side. The main reason why I want to become a developer is\n              to see the magic of software. I want to look past the curtain to see what is really going on. </p>\n            </figcaption>\n          </figure>\n        </div>\n      </div>\n\n      <div className=\"flex-item-1\" id='Projects'>\n        <Album />\n      </div>\n\n      <div className=\"flex-item-2\" id='contact'>\n\n\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}